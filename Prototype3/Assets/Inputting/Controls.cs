//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputting/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Spider"",
            ""id"": ""9cfa971b-c990-4130-b0c0-284255939636"",
            ""actions"": [
                {
                    ""name"": ""MoveAndTurn"",
                    ""type"": ""Value"",
                    ""id"": ""5ba9562d-f33c-478f-99aa-0b9256517ea3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5384285c-a498-4b41-bdbe-afdad57429c4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAndTurn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a617c0d1-15fe-46b6-bbfe-7395b37935a4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""MoveAndTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""26939913-7aa4-46e1-866f-3af5735e25dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""MoveAndTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2d758f6f-aca3-4e53-97f3-0613729dd707"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""MoveAndTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8d760962-5c23-4319-bc3f-1171ea252683"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""MoveAndTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse & Keyboard"",
            ""bindingGroup"": ""Mouse & Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Spider
        m_Spider = asset.FindActionMap("Spider", throwIfNotFound: true);
        m_Spider_MoveAndTurn = m_Spider.FindAction("MoveAndTurn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Spider
    private readonly InputActionMap m_Spider;
    private List<ISpiderActions> m_SpiderActionsCallbackInterfaces = new List<ISpiderActions>();
    private readonly InputAction m_Spider_MoveAndTurn;
    public struct SpiderActions
    {
        private @Controls m_Wrapper;
        public SpiderActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveAndTurn => m_Wrapper.m_Spider_MoveAndTurn;
        public InputActionMap Get() { return m_Wrapper.m_Spider; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpiderActions set) { return set.Get(); }
        public void AddCallbacks(ISpiderActions instance)
        {
            if (instance == null || m_Wrapper.m_SpiderActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpiderActionsCallbackInterfaces.Add(instance);
            @MoveAndTurn.started += instance.OnMoveAndTurn;
            @MoveAndTurn.performed += instance.OnMoveAndTurn;
            @MoveAndTurn.canceled += instance.OnMoveAndTurn;
        }

        private void UnregisterCallbacks(ISpiderActions instance)
        {
            @MoveAndTurn.started -= instance.OnMoveAndTurn;
            @MoveAndTurn.performed -= instance.OnMoveAndTurn;
            @MoveAndTurn.canceled -= instance.OnMoveAndTurn;
        }

        public void RemoveCallbacks(ISpiderActions instance)
        {
            if (m_Wrapper.m_SpiderActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpiderActions instance)
        {
            foreach (var item in m_Wrapper.m_SpiderActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpiderActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpiderActions @Spider => new SpiderActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse & Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface ISpiderActions
    {
        void OnMoveAndTurn(InputAction.CallbackContext context);
    }
}
